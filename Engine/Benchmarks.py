import numpy as np
import math

class Benchmarks:

    def createMatrix(A,B,mode,h=0):
        ''' Creates a single matrix based on
        . or +.
        In case of . a roungh approximation is
        done'''

        n1=np.size(A,0)
        if (np.size(B)>0):
            n2=np.size(B,1)
        else:
            n2=0
        n=n1+n2

        C=np.zeros((n,n),dtype=np.float128)
        for i in range(n1):
            for j in range(n1):
                C[i][j]=A[i][j]
        for i in range(n1):
            j2=0
            for j in range(n1,n1+n2):
                C[i][j]=B[i][j2]
                j2=j2+1

        if mode=='+':
            for i in range(n1,n1+n2):
                C[i][i]=1

        return C

    class IllustExample:
        A=np.array([
        [3,0,0,0,0,2,4],
        [1,2,3,0,0,2.9,2.9],
        [8,1,2,0,0,2.9,2.9],
        [7,0,0,8,2,3.9,3.9],
        [8,0,0,3,7,3.9,3.9],
        [0,0,0,0,0,6,3],
        [0,0,0,0,0,2,1],
        ])
        B=np.array([
        [3],
        [0],
        [0],
        [9],
        [11],
        [0],
        [0],
        ])
        mode='.'

    class IllustExample2:
        A=np.array([
        [3,2.9,3.9],
        [0,7,0],
        [0,0,2]
        ])
        B=np.array([
        [2],
        [0],
        [0],
        ])
        h=0.01
        mode='+'

    class Test:

        A=np.array([
        [1,0,0,0,0,0],
        [1,0,0,0,0,0],
        [1,0,0,0,0,0],
        [1,0,0,0,0,0],
        [1,0,0,0,0,0],
        [1,0,0,0,0,0],
        ])
        B=np.array([
        ])
        h=0.01
        mode='.'

    class FlightEnvelope:
        A=np.array([
        [0,0,0,1,0,0,0,0,0,0,0,0],
        [0,0,0,0,1,0,0,0,0,0,0,0],
        [0,0,0,0,0,1,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,-9.8,0,0,0,0],
        [0,0,0,0,0,0,9.8,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,1,0,0],
        [0,0,0,0,0,0,0,0,0,0,1,0],
        [0,0,0,0,0,0,0,0,0,0,0,1],
        [0,0,0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0,0,0],
        ])
        B=np.array([
        [0,0,0,0],
        [0,0,0,0],
        [0,0,0,0],
        [0,0,0,0],
        [0,0,0,0],
        [1,0,0,0],
        [0,0,0,0],
        [0,0,0,0],
        [0,0,0,0],
        [0,1,0,0],
        [0,0,1,0],
        [0,0,0,1],
        ])
        h=0.01
        mode='.'

    class DCConv:
        #IMPORTANT: Values are inaccuarate
        A=np.array([
        [0,0],
        [0,-5],
        ])
        B=np.array([
        [5],
        [0]
        ])
        h=0.01
        mode='.'

    class FiveVehiclePlatton:
        A=np.array([
        [0,1,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0],
        [1.7152555329,3.9705119979,-4.3600526739,-0.9999330812,-1.5731541104,0.2669165553,-0.2215507198,-0.4303855023,0.0669078193,-0.0881500219,-0.1881468451,0.0322187056,-0.0343095071,-0.0767587194,0.0226660281],
        [0,0,0,0,1,0,0,0,0,0,0,0,0,0,0],
        [0,0,1,0,0,-1,0,0,0,0,0,0,0,0,0],
        [0.7153224517,2.3973578876,0.2669165553,1.4937048131,3.5401264957,-4.2931448546,-1.0880831031,-1.7613009555,0.2991352608,-0.2558602268,-0.5071442217,0.0895738474,-0.0881500219,-0.1881468451,0.0548847337],
        [0,0,0,0,0,0,0,1,0,0,0,0,0,0,0],
        [0,0,0,0,0,1,0,0,-1,0,0,0,0,0,0],
        [0.493771732,1.9669723853,0.0669078193,0.6271724298,2.2092110425,0.2991352608,1.4593953061,3.4633677762,-4.2704788265,-1.0880831031,-1.7613009555,0.3218012889,-0.2215507198,-0.4303855023,0.121792553],
        [0,0,0,0,0,0,0,0,0,0,1,0,0,0,0],
        [0,0,0,0,0,0,0,0,1,0,0,-1,0,0,0],
        [0.40562171,1.7788255402,0.0322187056,0.4594622249,1.8902136659,0.0895738474,0.6271724298,2.2092110425,0.3218012889,1.4937048131,3.5401264957,-4.2382601209,-0.9999330812,-1.5731541104,0.3887091083],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,1,0],
        [0,0,0,0,0,0,0,0,0,0,0,1,0,0,-1],
        [0.371312203,1.7020668208,0.0226660281,0.40562171,1.7788255402,0.0548847337,0.493771732,1.9669723853,0.121792553,0.7153224517,2.3973578876,0.3887091083,1.7152555329,3.9705119979,-3.9713435656]
        ])
        B=np.array([
        ])
        h=0.01
        mode='.'

    class TenVehiclePlatton:
        A=np.array([
        [0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [1.702423734,3.929356551,-4.3607983776,-1.01374489,-1.6167727749,0.2653009364,-0.2375199245,-0.4793543458,0.06412815,-0.1079326841,-0.2463610381,0.0276872161,-0.0605561959,-0.1501445039,0.0151944922,-0.0374830081,-0.0986391305,0.009628751,-0.0242136837,-0.0665592904,0.0067836913,-0.015601062,-0.0442510048,0.0052325207,-0.0093924696,-0.0272127915,0.0043984935,-0.0044278796,-0.0129879863,0.0040303349],
        [0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [0,0,1,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [0.688678844,2.3125837761,0.2653009364,1.4649038095,3.4500022052,-4.2966702275,-1.1216775741,-1.863133813,0.2929881525,-0.2980761204,-0.6294988497,0.0793226422,-0.1454156921,-0.3450001686,0.0373159671,-0.0847698796,-0.2167037943,0.0219781835,-0.0530840701,-0.1428901352,0.0148612718,-0.0336061533,-0.0937720819,0.0111821848,-0.0200289416,-0.057238991,0.0092628557,-0.0093924696,-0.0272127915,0.0084288284],
        [0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,1,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [0.4511589195,1.8332294303,0.06412815,0.5807461599,2.066222738,0.2929881525,1.4043476136,3.2998577013,-4.2814757354,-1.1591605822,-1.9617729435,0.3026169036,-0.3222898041,-0.6960581401,0.0861063336,-0.1610167541,-0.3892511733,0.0425484878,-0.0941623492,-0.2439165858,0.026376677,-0.0575119497,-0.1558781215,0.0188916067,-0.0336061533,-0.0937720819,0.0152125197,-0.015601062,-0.0442510048,0.0136613491],
        [0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,1,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [0.3432262354,1.5868683922,0.0276872161,0.3906027236,1.6830849264,0.0793226422,0.5432631518,1.9675836075,0.3026169036,1.3801339299,3.2332984109,-4.274692044,-1.1747616442,-2.0060239482,0.3078494243,-0.3316822737,-0.7232709316,0.090504827,-0.1654446337,-0.4022391596,0.0465788228,-0.0941623492,-0.2439165858,0.0304070119,-0.0530840701,-0.1428901352,0.0232901001,-0.0242136837,-0.0665592904,0.0204450405],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0,0,1,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [0.2826700395,1.4367238883,0.0151944922,0.3057432273,1.4882292617,0.0373159671,0.3663890398,1.616525636,0.0861063336,0.5276620899,1.9233326028,0.3078494243,1.3707414603,3.2060856194,-4.2702935506,-1.1791895238,-2.0190119345,0.3118797592,-0.3316822737,-0.7232709316,0.094535162,-0.1610167541,-0.3892511733,0.0509773162,-0.0847698796,-0.2167037943,0.0356395326,-0.0374830081,-0.0986391305,0.0300737915],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0],
        [0.2451870315,1.3380847578,0.009628751,0.2584563558,1.3701645979,0.0219781835,0.2901421653,1.443978257,0.0425484878,0.3569965702,1.5893128445,0.090504827,0.5232342102,1.9103446165,0.3118797592,1.3707414603,3.2060856194,-4.2662632156,-1.1747616442,-2.0060239482,0.3162782527,-0.3222898041,-0.6960581401,0.0997676827,-0.1454156921,-0.3450001686,0.0577610076,-0.0605561959,-0.1501445039,0.0452682837],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,-1,0,0,0,0,0,0,0,0,0],
        [0.2209733477,1.2715254674,0.0067836913,0.2295859695,1.2938337531,0.0148612718,0.2490638862,1.3429518064,0.026376677,0.2857142857,1.4309902707,0.0465788228,0.3569965702,1.5893128445,0.094535162,0.5276620899,1.9233326028,0.3162782527,1.3801339299,3.2332984109,-4.2610306949,-1.1591605822,-1.9617729435,0.323061944,-0.2980761204,-0.6294988497,0.1093964337,-0.1079326841,-0.2463610381,0.0729554998],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,-1,0,0,0,0,0,0],
        [0.2053722857,1.2272744627,0.0052325207,0.2115808781,1.2443126759,0.0111821848,0.2251580898,1.2808457668,0.0188916067,0.2490638862,1.3429518064,0.0304070119,0.2901421653,1.443978257,0.0509773162,0.3663890398,1.616525636,0.0997676827,0.5432631518,1.9675836075,0.323061944,1.4043476136,3.2998577013,-4.2514019439,-1.1216775741,-1.863133813,0.3382564362,-0.2375199245,-0.4793543458,0.1370836498],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,-1,0,0,0],
        [0.1959798161,1.2000616712,0.0043984935,0.2009444061,1.2142864764,0.0092628557,0.2115808781,1.2443126759,0.0152125197,0.2295859695,1.2938337531,0.0232901001,0.2584563558,1.3701645979,0.0356395326,0.3057432273,1.4882292617,0.0577610076,0.3906027236,1.6830849264,0.1093964337,0.5807461599,2.066222738,0.3382564362,1.4649038095,3.4500022052,-4.2237147278,-1.01374489,-1.6167727749,0.4023845862],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,-1],
        [0.1915519365,1.1870736849,0.0040303349,0.1959798161,1.2000616712,0.0084288284,0.2053722857,1.2272744627,0.0136613491,0.2209733477,1.2715254674,0.0204450405,0.2451870315,1.3380847578,0.0300737915,0.2826700395,1.4367238883,0.0452682837,0.3432262354,1.5868683922,0.0729554998,0.4511589195,1.8332294303,0.1370836498,0.688678844,2.3125837761,0.4023845862,1.702423734,3.929356551,-3.9584137913]
        ])
        B=np.array([
        ])
        h=0.01
        mode='.'

    class CoOPVehiclesI:
        A=np.array([
        [0,1,0,0,0,0,0,0,0],
        [0,0,-1,0,0,0,0,0,0],
        [1.6050,4.8680,-3.5754,-0.8198,0.4270,-0.0450,-0.1942,0.3626,-0.0946],
        [0,0,0,0,1,0,0,0,0],
        [0,0,1,0,0,-1,0,0,0],
        [0.8718,3.8140,-0.0754,1.1936,3.6258,-3.2396,-0.5950,0.1294,-0.0796],
        [0,0,0,0,0,0,0,1,0],
        [0,0,0,0,0,1,0,0,-1],
        [0.7132,3.5730,-0.0964,0.8472,3.2568,-0.0876,1.2726,3.0720,-3.1356]
        ])
        B=np.array([
        [0],
        [1],
        [0],
        [0],
        [0],
        [0],
        [0],
        [0],
        [0],
        ])
        h=0.01
        mode='.'

    class CoOPVehiclesII:
        A=np.array([
        [0,1,0,0,0,0,0,0,0],
        [0,0,-1,0,0,0,0,0,0],
        [1.6050,4.8680,-3.5754,0,0,0,0,0,0],
        [0,0,0,0,1,0,0,0,0],
        [0,0,1,0,0,-1,0,0,0],
        [0,0,0,1.1936,3.6258,-3.2396,0,0,0],
        [0,0,0,0,0,0,0,1,0],
        [0,0,0,0,0,1,0,0,-1],
        [0.7132,3.5730,-0.0964,0.8472,3.2568,-0.0876,1.2726,3.0720,-3.1356],
        ])
        B=np.array([
        [0],
        [1],
        [0],
        [0],
        [0],
        [0],
        [0],
        [0],
        [0],
        ])
        h=0.01
        mode='.'

    class PKPD:
        #With weight of 25 Kg
        weight=25
        v1=458.4*weight
        k10=0.1527*pow(weight,-0.3)
        k12=0.114
        k13=0.0419
        k21=0.055
        k31=0.0033
        A=np.array([
        [-(k10+k12+k13),k12,k13],
        [k21,-k21,0],
        [k31,0,-k31]
        ])
        B=np.array([
        [1/v1],
        [0],
        [0]
        ])
        h=0.01
        mode='.'

    class PKPD2:
        #With weight of 25 Kg
        weight=25
        v1=458.4*weight
        k10=0.1527*pow(weight,-0.3)
        k12=0.114
        k13=0.0419
        k21=0.055
        k31=0.0033
        kd=40 #with Td=20s
        A=np.array([
        [-(k10+k12+k13),k12,k13,0],
        [k21,-k21,0,0],
        [k31,0,-k31,0],
        [kd,0,0,-kd]
        ])
        B=np.array([
        [1/v1],
        [0],
        [0],
        [0]
        ])
        h=0.01
        mode='.'

    class SpaceCraftRndzvs:
        mu=3.986e14
        r=42164
        mc=500
        n=math.sqrt(mu/(pow(r,3)))
        A=np.array([
        [0,0,1,0],
        [0,0,0,1],
        [3*n*n,0,0,2*n],
        [0,0,-2*n,0]
        ])
        B=np.array([
        [0,0],
        [0,0],
        [1/mc,0],
        [0,1/mc]
        ])
        h=0.01
        mode='.'

    class HolesCXc:
        A=np.array([
        [0,1,0,-1,0],
        [0,0,0.996,0,0],
        [0,0,-0.9999999525,0,0],
        [0,0,0,0,0],
        [0,0,0,49.99999763,-49.99999763]
        ])
        B=np.array([
        [0,-0.00872664619,-0.00872664619,0,0],
        [0,0,0,0.0003,0],
        [0,0,0,0.07499999644,0],
        [0.999999992,0,0,0,0],
        [0,0.4363322888,0.4363322888,0,0]
        ])
        h=0.01
        mode='.'

    class HolesPDp:
        A=np.array([
        [0.08087,0],
        [0,0.08087]
        ])
        B=np.array([
        ])
        h=0.01
        mode='.'

    class HolesPXp:
        A=np.array([
        [-162.1272879,0,162.1272879,-409.7154124,0,0],
        [1,0,0,0,0,0],
        [78.14959139,0,-78.14959139,269.6273393,0,0],
        [0,0,1,0,0,0],
        [0,0,0,0,-92.4134822,0],
        [0,0,0,0,1,0],
        ])
        B=np.array([
        [157.5738419,157.5738419],
        [0,0],
        [-75.95760351,-75.95760351],
        [0,0],
        [-51.3265211,51.3265211],
        [0,0]
        ])
        h=0.01
        mode='.'

    class MotorTransmission1:
        '''Needs change of matrices'''

        def createMatrix(A,B,n1,n2,h,mode):
            ''' Creates a single matrix based on
            . or +.
            In case of . a roungh approximation is
            done'''

            n=n1+n2
            C=np.zeros((n,n),dtype=np.float128)
            if mode=='+':
                for i in range(n1):
                    for j in range(n1):
                        C[i][j]=A[i][j]
                for i in range(n1):
                    j2=0
                    for j in range(n1,n1+n2):
                        C[i][j]=B[i][j2]
                        j2=j2+1
                for i in range(n1,n1+n2):
                    C[i][i]=1
            elif mode=='.':
                I=np.zeros((n1,n1),dtype=np.float128)
                for i in range(n1):
                    I[i][i]=1
                A2=h*A
                A2=np.add(I,A2)
                B2=h*B
                for i in range(n1):
                    for j in range(n1):
                        C[i][j]=A2[i][j]
                for i in range(n1):
                    j2=0
                    for j in range(n1,n1+n2):
                        C[i][j]=B2[i][j2]
                        j2=j2+1
                for i in range(n1,n1+n2):
                    C[i][i]=1

            return C

        ms=3.2
        Rs=0.08
        jg2=0.09
        Tf=1
        A=np.array([
        [0,0,0,0,0],
        [0,0,0,0,0],
        [1,0,0,0,0],
        [0,1,0,0,0],
        [0,0,0,0,0],
        ])
        B=np.array([
        [1/ms,0],
        [0,-(Rs*Tf)/jg2],
        [0,0],
        [0,0],
        [0,0]
        ])
        '''fi=np.array([
        [0,-(Rs*Tf)/jg2,0,0,0]
        ])'''
        h=0.01
        mode='.'

    class MotorTransmission2:
        '''Needs change of matrices'''

        ms=3.2
        A=np.array([
        [0,0,0,0,0],
        [0,0,0,0,0],
        [0,0,1,0,0],
        [0,1,0,1,0],
        [ms,ms,0,0,1],
        ])
        B=np.array([])
        h=0.01
        mode='.'
